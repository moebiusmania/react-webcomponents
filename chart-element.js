(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{510:function(t,e,n){var i=n(511);"string"==typeof i&&(i=[[t.i,i,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};n(7)(i,r);i.locals&&(t.exports=i.locals)},511:function(t,e,n){(e=t.exports=n(6)(!1)).push([t.i,".chart___363e7 {\n  width: 100%;\n  height: 400px;\n  border: 1px solid #bbb; }\n\n.highlight___36Vqc {\n  background-color: #e9f5fc;\n  padding: 2px 6px; }\n",""]),e.locals={chart:"chart___363e7",highlight:"highlight___36Vqc"}},512:function(t,e,n){"use strict";n.r(e),n.d(e,"default",function(){return h});var i=n(211),r=n.n(i),a=n(510),s=n.n(a);class h extends HTMLElement{static get observedAttributes(){return["chart-data"]}render(){this.innerHTML=`\n      <p>Standard <b class="${s.a.highlight}">Web Component</b> drawing a chart, \n      receiving data from the React parent component:</p>\n      <div class="${s.a.chart}"></div>\n      <p><small>(you can resize the window and watch the chart adapt to its container)</small></p>\n      <p>Charts rendered by the <a href="https://ecomfe.github.io/echarts-doc/public/en/index.html" target="_blank">Echart</a> library.</p>\n    `}resize(){this.myChart.resize()}attributeChangedCallback(t,e,n){const i=this.myChart;i&&i.setOption(JSON.parse(n))}connectedCallback(){this.resizeCb=this.resize.bind(this),window.addEventListener("resize",this.resizeCb),this.render();const t=this.getAttribute("chart-data")||{},e=this.querySelector(`.${s.a.chart}`);this.myChart=r.a.init(e),this.myChart.setOption(JSON.parse(t))}disconnectedCallback(){window.removeEventListener("resize",this.resizeCb)}}customElements.define("e-chart",h)}}]);
//# sourceMappingURL=chart-element.js.map